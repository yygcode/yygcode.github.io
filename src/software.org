#+TITLE: 我的软件清单
#+INCLUDE: export-notes.org
#+COMMENTS: 本文自2017/11开始整理，规划2018/03前内完成整理。

-----
#+BEGIN_VERSE
感谢自由软件，感谢 [[https://stallman.org/][Richard Stallman]] 。本文软件根据字母顺序排列。
#+END_VERSE
-----

* autohotkey                             :windows_autokey:keystroke:shortcut:
  :PROPERTIES:
  :CUSTOM_ID: autohotkey
  :END:
** 用途
Windows平台目录层叠，鼠标点击的工作方式非常低效。比如，我要进入“我的电脑->E:->
work->inspur->FY17->project-plans”，要鼠标点击或键盘敲击回车多次。[[https://autohotkey.com/][AutoHotkey
]]完美的解决了这个问题。
** 安装配置
[[https://autohotkey.com/][AutoHotkey]]主页下载安装程序。安装后编写AutoHotkey脚本文件定制快捷键。文件名需要以
.ahk结尾。关于AutoHotkey脚本语法在安装目录下找帮助文件 =AutoHotkey Help File= 。

回到最初问题，按下Win+时直接进入FY17目录：
#+BEGIN_SRC sh
; Ctrl+Win+i goto directory
^#i::Run explorer.exe E:\work\inspur\FY17
#+END_SRC

按下Ctrl+Win+g时，用Google搜索剪贴板内容：
#+BEGIN_EXPORT ascii
; google search: win+g
^#g::Run https://www.google.com.hk/search?q=%clipboard%
#+END_EXPORT
很多时候Google无法连通。可替换为Bing或Baidu：
#+BEGIN_EXPORT ascii
; baidu
^#g::Run https://www.baidu.com/s?ie=utf-8&wd=%clipboard%
; bing
^#g::Run https://cn.bing.com/search?q=%clipboard%
#+END_EXPORT

使用[[file:emacs.org][Emacs]]的用户更希望交换Swap/Ctrl键位置：
#+BEGIN_EXPORT ascii
; Swap Capslock and Ctrl
Capslock::Ctrl
Ctrl::Capslock
#+END_EXPORT

完整配置参考我的[[https://github.com/][GitHub]]项目[[https://github.com/yygcode/system-config.git][system-config]]。Windows下的各种配置我维护在子目录
win-customize下，AutoHotkey脚本文件autohotkey.ahk。我的配置中有很多和安装
如见目录相关的内容，需要根据实际调整，比如mingw安装在E:盘时，需要修改PATH
环境变量。

一般在配置好之后更希望能够随机自启动。加入到用户的自启动菜单。一般在目录
=C:\Users\%Username%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup= 。

执行system-config/win-customize/add-autostart.cmd，添加所有自启动的条目。

** 网络资料
- [[https://sourceforge.net/p/ahkcn/wiki/AutoHotkey/?version=9]]
- [[https://zh.wikipedia.org/wiki/AutoHotkey]]
- [[http://xbeta.info/tag/ahk][善用佳软AutoHotkey学习指南]]

* TODO cygwin                                                 :unix_like_env:

* emacs                                                           :editor:os:
  :PROPERTIES:
  :CUSTOM_ID: emacs
  :END:

[[https://www.gnu.org/software/emacs/][Emacs]]不仅仅是一个相当好的编辑器，它是一个[[http://wiki.c2.com/?EmacsAsOperatingSystem][操作系统]]。请移步专题笔记《[[file:emacs.org][Emacs笔记]]》。

* TODO fio                                           :test:performance:block:
FIO(Flexible I/O tester)是Linux下IO子系统和调度器的性能测试软件. 可以从[[https://git.kernel.org/pub/scm/linux/kernel/git/axboe/fio.git][
kernel scm]]或[[https://github.com/axboe/fio][Github]]下载.

* TODO git                                                  :version_control:
* TODO latex                                             :typesetting_system:
* mingw                                                             :gcc_env:
  :PROPERTIES:
  :CUSTOM_ID: mingw
  :END:

Mingw(Minimalist GNU for Windows, Windows下极简GNU环境), 提供Windows下GNU软件
编译工具链。[[http://www.msys2.org/http://www.mingw.org/wiki/msys][MSYS]]是其配套的命令行环境（基于cygwin实现的小巧玲珑的环境），现已被
[[#msys2][MSYS2]]替代。MSYS2是基于现在cygwin（POSIX兼容层）的重现实现，提供与Windows更好的
互操作。安装配置参考[[#msys2][MSYS2]]。

* msys2                            :distro_building_platform_win:msys2:mingw:
  :PROPERTIES:
  :CUSTOM_ID: msys2
  :END:

** 安装
[[http://www.msys2.org/][MSYS2]]是Windows系统下的软件分发和构建平台, 提供类UNIX环境. 阅读[[https://github.com/msys2/msys2/wiki][MSYS2 WIKI]]获取更多信息.

下载[[http://repo.msys2.org/distrib/x86_64/][64bit]]或[[http://repo.msys2.org/distrib/i686/][32bit]]版本, 安装后重复执行操作"启动, 运行\(pacman -Syuu\), 退出",
直到提示所有软件升级完毕:
#+BEGIN_SRC shell
  yanyg@yanyg01 MINGW64 ~
  $ pacman -Syuu
  :: Synchronizing package databases...
   mingw32 is up to date
   mingw64 is up to date
   msys is up to date
  :: Starting core system upgrade...
   there is nothing to do
  :: Starting full system upgrade...
   there is nothing to do
#+END_SRC

执行\(pacman -Ss <name-pattern, pacman -S <package-name> ...,
pacman -R <package-name>, pacman -Ql [name-pattern]\)搜索, 安装, 卸载, 清单列举
软件包. 参考[[https://github.com/msys2/msys2/wiki/Using-packages][Using Packages]].

例如, 编译[[https://github.com/politza/pdf-tools][pdf-tools]]时提示错误缺少\(glib2.0, poppler\)等. 安装方式如下:
#+BEGIN_SRC shell
  ~$ ./configure
  configure: loading site script /mingw64/etc/config.site
  checking for a BSD-compatible install... /usr/bin/install -c
  checking whether build environment is sane... yes
  checking for a thread-safe mkdir -p... /usr/bin/mkdir -p
  checking for gawk... gawk
  ...
  checking for poppler... no
  configure: error: Package requirements (poppler) were not met:

  No package 'poppler' found
  ~$ pacman -Ss poppler
  mingw32/mingw-w64-i686-poppler 0.59.0-2
      PDF rendering library based on xpdf 3.0 (mingw-w64)
  mingw32/mingw-w64-i686-poppler-data 0.4.8-1
      Encoding data for the poppler PDF rendering library
  mingw32/mingw-w64-i686-poppler-qt4 0.36.0-1
      PDF rendering library based on xpdf 3.0 (mingw-w64)
  mingw64/mingw-w64-x86_64-poppler 0.59.0-2
      PDF rendering library based on xpdf 3.0 (mingw-w64)
  mingw64/mingw-w64-x86_64-poppler-data 0.4.8-1
      Encoding data for the poppler PDF rendering library
  mingw64/mingw-w64-x86_64-poppler-qt4 0.36.0-1
      PDF rendering library based on xpdf 3.0 (mingw-w64)
  ~$ pacman -S mingw-w64-x86_64-poppler
  resolving dependencies...
  looking for conflicting packages...
  warning: dependency cycle detected:
  warning: mingw-w64-x86_64-harfbuzz will be installed before its mingw-w64-x86_64-freetype dependency

  Packages (27) mingw-w64-x86_64-c-ares-1.13.0-3  mingw-w64-x86_64-cairo-1.15.6-2  mingw-w64-x86_64-curl-7.56.1-1  mingw-w64-x86_64-fontconfig-2.12.6-1  mingw-w64-x86_64-freetype-2.8.1-1
                mingw-w64-x86_64-graphite2-1.3.10-1  mingw-w64-x86_64-harfbuzz-1.7.1-1  mingw-w64-x86_64-icu-58.2-2  mingw-w64-x86_64-jansson-2.10-1  mingw-w64-x86_64-lcms2-2.8-1  mingw-w64-x86_64-libidn2-2.0.4-1
                mingw-w64-x86_64-libjpeg-turbo-1.5.2-1  mingw-w64-x86_64-libmetalink-0.1.3-3  mingw-w64-x86_64-libssh2-1.8.0-1  mingw-w64-x86_64-libtiff-4.0.8-1  mingw-w64-x86_64-libunistring-0.9.7-1
                mingw-w64-x86_64-lzo2-2.10-1  mingw-w64-x86_64-nghttp2-1.26.0-1  mingw-w64-x86_64-nspr-4.17-1  mingw-w64-x86_64-nss-3.33-1  mingw-w64-x86_64-openjpeg2-2.3.0-1  mingw-w64-x86_64-pixman-0.34.0-3
                mingw-w64-x86_64-poppler-data-0.4.8-1  mingw-w64-x86_64-spdylay-1.4.0-1  mingw-w64-x86_64-sqlite3-3.20.0-1  mingw-w64-x86_64-xz-5.2.3-1  mingw-w64-x86_64-poppler-0.59.0-2

  Total Download Size:    29.74 MiB
  Total Installed Size:  166.38 MiB

  :: Proceed with installation? [Y/n] y
  :: Retrieving packages...
#+END_SRC

** Windows配置
Windows中文版本使用GBK编码，mingw使用UTF-8字符集，执行系统命令会显示乱码，修改
msys2使用GBK解决此问题。启动MSYS2 MINGW控制台，右键在Options->Text，修改Locale
为zh_CN，Character Set为GBK，完成后Save，Apply。执行locale相关信息已修改为中文：
#+BEGIN_SRC sh
  $ locale
  LANG=zh_CN.GBK@cjknarrow
  LC_CTYPE="zh_CN.GBK@cjknarrow"
  LC_NUMERIC="zh_CN.GBK@cjknarrow"
  LC_TIME="zh_CN.GBK@cjknarrow"
  LC_COLLATE="zh_CN.GBK@cjknarrow"
  LC_MONETARY="zh_CN.GBK@cjknarrow"
  LC_MESSAGES="zh_CN.GBK@cjknarrow"
  LC_ALL=
#+END_SRC

此配置下各类命令的帮助都是中文的，部分帮助会有些许显示异常，但不会影响使用。如果
在bash初始化文件（~/.bashrc, ~/.bash_profile）将LANG修改为en_US.UTF-8，在显示
中文文件名时会有乱码，如果没有中文文件名则不会有问题。更完美的解决方案还未找到。

下面是中英文两种man的截取：
#+BEGIN_SRC sh
  $ man man
  ...
  默认将按预定的顺序查找所有可用的  ▒▒▒▒ (默认是“1 n l 8 3 0 2 5 4 9 6 7”，

  $ LANG=en_US.UTF-8 man man
  available sections following a pre-defined order ("1 n l 8 3 0 2 5 4 9 6 7" by default,
#+END_SRC

习惯于使用英文帮助的，设置LANG为en_US.UTF-8，连同经常使用的几个alias一起加入到
~/.bash_profile。注意此时如果有中文文件名会显示乱码。
#+BEGIN_SRC sh
  $ cat ~/.bash_profile
  # WARNING: uncomment the below line if all files name are english.
  # export LANG=en_US.UTF-8
  export LS_COLORS='no=00:fi=00:di=015;37;44:ln=015;36:pi=40;33:so=015;35:do=015;35:bd=40;33;01:cd=40;33;01:or=015;05;37;41:mi=015;05;37;41:ex=015;32:*.cmd=015;32:*.exe=015;32:*.com=015;32:*.btm=015;32:*.bat=015;32:*.sh=015;32:*.csh=015;32:*.tar=015;31:*.tgz=015;31:*.arj=015;31:*.taz=015;31:*.lzh=015;31:*.zip=015;31:*.z=015;31:*.Z=015;31:*.gz=015;31:*.bz2=015;31:*.bz=015;31:*.tbz2=015;31:*.tz=015;31:*.deb=015;31:*.rpm=015;31:*.rar=015;31:*.ace=015;31:*.zoo=015;31:*.cpio=015;31:*.7z=015;31:*.rz=015;31:*.jpg=015;35:*.jpeg=015;35:*.gif=015;35:*.bmp=015;35:*.ppm=015;35:*.tga=015;35:*.xbm=015;35:*.xpm=015;35:*.tif=015;35:*.tiff=015;35:*.png=015;35:*.mng=015;35:*.xcf=015;35:*.pcx=015;35:*.mpg=015;35:*.mpeg=015;35:*.m2v=015;35:*.avi=015;35:*.mkv=015;35:*.ogm=015;35:*.mp4=015;35:*.m4v=015;35:*.mp4v=015;35:*.mov=015;35:*.qt=015;35:*.wmv=015;35:*.asf=015;35:*.rm=015;35:*.rmvb=015;35:*.flc=015;35:*.fli=015;35:*.gl=015;35:*.dl=015;35:*.pdf=00;32:*.ps=00;32:*.txt=00;32:*.patch=00;32:*.diff=00;32:*.log=00;32:*.tex=00;32:*.doc=00;32:*.mp3=015;32:*.wav=015;32:*.mid=015;32:*.midi=015;32:*.au=015;32:*.ogg=015;32:*.flac=015;32:*.aac=015;32:'
  alias whence='type -a'                        # where, of a sort
  alias grep='grep --color'                     # show differences in colour
  alias egrep='egrep --color=auto'              # show differences in colour
  alias fgrep='fgrep --color=auto'              # show differences in colour
  alias l='ls --show-control-chars --color=auto'
  alias la='ls -aF --show-control-chars --color=auto'
  alias ll='ls -alF --show-control-chars --color=auto'
  alias ls='ls --show-control-chars --color=auto'
#+END_SRC

* TODO pdf                                             :Acrobat_reader:Foxit:
** 使用技巧
- PDF超链接是一个经常使用的特性，在跳转后，使用Alt+Left Arrorw(Previous View)返回。

* sdcv                                                           :dictionary:
  :PROPERTIES:
  :CUSTOM_ID: sdcv
  :END:

SDCV是[[http://stardict-4.sourceforge.net/][星际译王(Stardict)]]的命令行版本. 星际译王是一款跨平台的国际词典开源软件,
项目领导[[http://www.huzheng.org/][胡正]]先生, 开发人员Sergey<kubtek@gmail.com>, Evgeniy<dushistov@mail.ru>,
Tao Wang<dancefire@gmail.com>, 贡献人员Alex Murygin <murygin@aitoc.com>.
因个人习惯只使其命令行版本. 感谢胡正.

SDCV源码在[[https://github.com/Dushistov/sdcv/][Github]]上, 在cygwin64下默认编译选项遇到\(popen/pclose\)未定义错误, 这是
由于\(popen\)不是ISO C++标准导致的. 修改编译参数\(-U__STRICT_ANSI__\)解决.

SDCV需要单独下载词典, 点击[[http://stardict.rrr.rs/dict.org/index.html][这里]]获取字典压缩包, 根据示例命令解压.

#+BEGIN_SRC shell
  # Change to sdcv directory
  ~$ git show --oneline
  51db56f (HEAD -> master, origin/master, origin/HEAD) Merge pull request #38 from nijel/master

  ~$ mkdir build -p
  ~$ cd build
  ~$ cmake -D CMAKE_CXX_FLAGS="-U__STRICT_ANSI__" -D CMAKE_INSTALL_PREFIX:PATH=/usr ..
  ~$ make
  ~$ make lang
  ~$ make install
  ~$ sdcv -v
  Console version of Stardict, version 0.5.2
  ~$ mkdir -p /usr/share/stardict/dic
  ~$ tar -C /usr/share/stardict/dic -xvf ~/Downloads/stardict-langdao-ec-gb-2.4.2.tar.bz2
  stardict-langdao-ec-gb-2.4.2/
  stardict-langdao-ec-gb-2.4.2/langdao-ec-gb.dict.dz
  stardict-langdao-ec-gb-2.4.2/langdao-ec-gb.idx
  stardict-langdao-ec-gb-2.4.2/langdao-ec-gb.ifo
  ~$ sdcv 字典
  Found 1 items, similar to 字典.
  -->朗道汉英字典5.0
  -->字典

  dictionary; glossary; vocabulary; wordbook
  【电】 dictionary
  相关词组:
    活字典
    字典的
    字典集
  ~$ sdcv dictionary
  Found 1 items, similar to dictionary.
  -->朗道英汉字典5.0
  -->dictionary

  ,*['dikʃәnәri]
  n. 字典, 词典
  【计】 词典
#+END_SRC

我做了编译调整的版本在[[https://github.com/yygcode/sdcv][这里]]下载.

* sharex                                        :screencast:screen_recording:
  :PROPERTIES:
  :CUSTOM_ID: sharex
  :END:
ShareX是自由/开源软件, 基于.NET开发, 只能运行在Windows系统上. 支持截屏/录屏, 并
进行各种各样的分享. 界面支持多语言. [[https://en.wikipedia.org/wiki/ShareX][WIKI]]和[[https://zhuanlan.zhihu.com/p/19627720][知乎]]有介绍.
- 代码: [[https://github.com/ShareX/ShareX][github]]
- 主页: https://getsharex.com/
- 下载: [[https://getsharex.com/downloads/][Downloads]]

在[[https://getsharex.com/][主页]]上可找到完整的介绍文档. 录屏配置主菜单位于:
- 英文界面: Task settings->Capture->Screen recorder->Screen recorder options
- 中文界面: 任务设置->截图->屏幕记录->屏幕录制选项

录屏使用[[https://www.ffmpeg.org/][ffmpeg]]实现, 菜单"录屏配置->FFmpeg路径"下点击...设置或下载FFmpeg. 默认
配置未包含音频, 在录屏配置菜单'音频源'中选择麦克风或适当的音频源.

默认热键=Shift+PrtSc=启动/停止录屏, 启动时拖曳鼠标修改录屏区域. 点击菜单
"截图文件夹..."查看历史截图和录屏文件. 热键和录屏文件夹均可在主界面下找到配置
菜单.

我的配置:
- FFmpeg路径: %MyDocuments%\ShareX\Tools\ffmpeg.exe
- 录屏路径: G:\screencast
- 截图路径: G:\screenshot

Q&A
- 设置录屏路径和截图路径无效
  关闭ShareX界面时, ShareX依然在后台运行. 在任务栏右键ShareX图标, 选择"退出",
  然后再次启动.
- 什么是GDI Grab
  录屏选项中, 视频源可以选择"GDI Grab". GDI Grab是Windows系统下基于GDI的录屏设备.
  参考[[https://www.ffmpeg.org/ffmpeg-devices.html#gdigrab][FFmpeg GDI Grab]].
* TODO source code pro                                          :fonts:emacs:
** Windows
   :PROPERTIES:
   :CUSTOM_ID: source-code-pro
   :END:
1. 下载[[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]]. 不使用git下载ZIP压缩包并解压缩;
2. 安装Adobe提供的[[http://www.adobe.com/devnet/opentype/afdko.html][AFDKO字体开发套件]], 下载Win版本, 根据解压缩文件夹下
   FDK/Read_Me_First.html方式操作;
#+BEGIN_QUOTE
After downloading and decompressing the FDK, the only installation step is to add the directory for the FDK programs to your system's environment variable "PATH". This variable contains a list of directory paths, as a single string of text with the directory paths separated by semicolons. When the system needs to find a program that you have typed in a command-line, it looks for that program in all the directories listed in the PATH variable. You need to add the path to the executable FDK directory at '<path to FDK>\Tools\win' to this list. Fortunately, the FDK comes with a command file to do this for you. In order to run this file successfuly, your account does need system admin privileges.

Download the AFDKO archive file and decompress it.
You should now have a folder named "FDK". Move it wherever you want (example: C:\Program Files (x86)\FDK).
Open the "FDK" folder. and find the file "FinishInstallWindows.cmd".
Open a command prompt window. If you do not know how to do this, read the file "FDK\Technical Documentation\CommandLineHowTo.pdf".
Note! The command window must be run with Administrator privileges. If you open a regular command line window, the script will fail. To open a command window with Adminstrator priviliges, right click on the command program icon, and choose "Run with Adminstrator privileges."
Enter the path to the script file in the command window. An easy way to do this is to:
Click once on the file "FinishInstallWindows.cmd". This will place the path to the parent directory at the top of the Explorer window.
Copy the directory path from the top of the Explorer window by selecting the text and copying it. Paste it into the command window (right click, and choose the option "Paste"). Finish the command-line by typing the name of the script file, "FinishInstallWindows.cmd" at the end of the directory path, and then press "RETURN/ENTER".
If all went well the FDK should now be ready to run. To test it, do the following:

Open a Command Prompt window. (Start Menu > Run... > cmd.exe)
Type "autohint -h" (no quotes) and hit "Return". This should give you the Help information about the Autohint tool.
NOTE: If you move the FDK directory to a new location, you will need to change the PATH variable as well.
#+END_QUOTE
上述操作概要描述:
- 拷贝FDK到软件安装目录, 假定为 C:\Program Files (x86)\FDK;
- 以管理员权限打开Cmd, 进入FDK目录, 执行FinishInstallWindows.cmd;
- 系统环境变量增量 C:\Program Files (x86)\FDK\Tools\win;
- 注销或重启系统, 再次登录;
3. 进入Source Code Pro目录, 执行build.cmd;
4. Win7打开控制面板->外观和个性化->字体, 把target目录下OTF/TTF下字体文件拖动到控制面板字体窗口安装.
5. Win10右键字体文件, 选择导入

* TODO svn                                                  :version_control:
* TODO tex                                               :typesetting_system:
* TODO tmux                                            :terminal:multiplexer:

* TODO vim                                                           :editor:
